// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Users {
  userId        Int           @id @default(autoincrement()) @map("userId")  
  email         String        @unique
  password      String
  imgUrl        String        @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png") @map("imgUrl")
  phone         String        @unique
  address       String
  createdAt     DateTime      @default(now())               @map("createdAt")
  updatedAt     DateTime      @updatedAt @default(now())    @map("updatedAt")
  Pets          Pets[]
  Reviews       Reviews[]
  Appointments  Appointments[]

  @@map("Users")
}

enum petCategory{
  CAT
  DOG
  ETC
}

model Pets {
  petId       Int         @id @default(autoincrement()) @map("petId")
  userId      Int         @map("userId")
  petName     String      @map("petName")
  petAge      Int         @map("petAge")
  imgUrl      String      @map("imgUrl")
  petCategory petCategory @map("petCategory") 
  createdAt   DateTime    @default(now())               @map("createdAt")
  updatedAt   DateTime    @updatedAt @default(now())    @map("updatedAt")
  Users       Users       @relation(fields: [userId], references: [userId], onDelete:Cascade)

  @@map("Pets")
}


model Appointments{
  appointmentId    Int            @id @default(autoincrement()) @map("appointmentId")
  sitterId         Int            @map("sitterId")
  userId           Int            @map("userId")
  date             String
  pets             String 
  phone            String        
  address          String
  significant      String  
  createdAt        DateTime       @default(now())               @map("createdAt")
  updatedAt        DateTime       @updatedAt @default(now())    @map("updatedAt")    
  Users            Users          @relation(fields: [userId], references: [userId], onDelete:Cascade)
  PetSitters       PetSitters     @relation(fields: [sitterId], references: [sitterId], onDelete:Cascade)
 

  @@map("Appointments")
}

model PetSitters{
  sitterId         Int         @id @default(autoincrement()) @map("sitterId")
  name             String      
  introduce        String      
  phone            String         
  imgUrl           String      @map("imgUrl")
  address          String      
  career           String     
  createdAt        DateTime    @default(now())               @map("createdAt")
  updatedAt        DateTime    @updatedAt @default(now())    @map("updatedAt")
  Appointments     Appointments[]
  Reviews          Reviews[]


  @@map("PetSitters")
}


model Reviews{
  reviewId         Int            @id @default(autoincrement()) @map("reviewId")
  userId           Int            @map("userId")
  sitterId         Int            @map("sitterId")
  content          String
  raiting          Int
  createdAt        DateTime       @default(now())               @map("createdAt")
  updatedAt        DateTime       @updatedAt @default(now())    @map("updatedAt")
  Users            Users          @relation(fields: [userId], references: [userId], onDelete:Cascade)
  PetSitters       PetSitters     @relation(fields: [sitterId], references: [sitterId], onDelete:Cascade)


  @@map("Reviews")
}